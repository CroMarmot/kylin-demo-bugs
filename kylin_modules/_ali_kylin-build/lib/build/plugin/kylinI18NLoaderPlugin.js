"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=webpackLangConfig;var _path=require("path"),_path2=_interopRequireDefault(_path),_index=require("../../utils/index"),_chalk=require("chalk"),_chalk2=_interopRequireDefault(_chalk),_fs=require("fs"),_fs2=_interopRequireDefault(_fs),_webpack=require("webpack"),_webpack2=_interopRequireDefault(_webpack),_glob=require("glob"),_glob2=_interopRequireDefault(_glob);function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function getLangConfigStatus(e,t){const s=_path2.default.resolve(e.cwd,t.options.defaultLangConfigDir),a={dir:{},files:{},lib:{}};try{if(_fs2.default.statSync(s).isDirectory()){a.dir={success:!0,msg:`[${s}] 目录存在`};const e=_glob2.default.sync(_path2.default.resolve(s,"*.js"));e.length>0?a.files={success:!0,msg:`[${t.options.defaultLangConfigDir}] 包含语言文件[ ${_chalk2.default.yellow(e.map(e=>_path2.default.relative(s,e)).join(", "))}]`}:a.files={success:!1,msg:`[${_chalk2.default.red(t.options.defaultLangConfigDir)}] 目录不包含${_chalk2.default.red("*.js")}文件`}}else a.dir={success:!1,msg:`[${_chalk2.default.red(s)}] 不是目录`}}catch(e){a.dir={success:!1,msg:`[${_chalk2.default.red(s)}] 目录不存在`}}try{const e=require.resolve(t.options.defaultLangLib);a.lib=e?{success:!0,msg:`[${t.options.defaultLangLib}] 依赖存在`}:{success:!1,msg:`[${_chalk2.default.red(t.options.defaultLangLib)}] 依赖不存在`}}catch(e){a.lib={success:!1,msg:`[${_chalk2.default.red(t.options.defaultLangLib)}] 依赖不存在`}}return a}function webpackLangConfig(e,t,s){const a=_path2.default.resolve(e.cwd,t.options.defaultLangConfigDir);let i=t.options.enableKylinI18N;const l=getLangConfigStatus(e,t),n=l.dir,r=l.files,u=l.lib,c=Object.keys(l).map(e=>l[e]).filter(e=>e.msg).map(e=>` ${e.success?_chalk2.default.green(`[√] ${e.msg}`):_chalk2.default.red(`[×] ${e.msg}`)}\n`).join("");if(n.success&&r.success&&u.success?!1===i?_index.hint.warn("[i18n]",`${_chalk2.default.yellow("未开启多语言")}`):(i=!0,_index.hint.success("[i18n]",`${_chalk2.default.green("开启多语言")}\n${c}`)):i&&(i=!1,_index.hint.error("[i18n]",`开启多语言依赖以下条件:\n${c}`)),i){const e=_path2.default.resolve(__dirname,"../plugin/kylinI18NLoader");Object.keys(s.entry).forEach(t=>{const a=s.entry[t];Array.isArray(a)?a.unshift(e):s.entry[t]=[e,a]}),s.plugins.push(new _webpack2.default.ContextReplacementPlugin(/^__kylinI18NLangDir__$/,a,!1,/\.js$/i))}return s}module.exports=exports.default;