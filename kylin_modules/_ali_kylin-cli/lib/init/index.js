"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r])}return e};exports.default=init;var _chalk=require("chalk"),_chalk2=_interopRequireDefault(_chalk),_ora=require("ora"),_ora2=_interopRequireDefault(_ora),_userHome=require("user-home"),_userHome2=_interopRequireDefault(_userHome),_path=require("path"),_path2=_interopRequireDefault(_path),_utils=require("../utils"),_rimraf=require("rimraf"),_rimraf2=_interopRequireDefault(_rimraf),_fs=require("fs"),_fs2=_interopRequireDefault(_fs),_ls=require("../ls");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}const appIdPrompts=[{name:"appId",type:"input",message:"离线应用请输入(appId)，无则置空",default:""}],destPrompts=[{name:"currentDest",type:"confirm",default:!1,message:`是否在${_chalk2.default.yellow("当前目录")}初始化工程？`}];function*getInitAppInfo(e){return yield(0,_utils.question)(appIdPrompts)}function*getDest(e){return yield(0,_utils.question)(destPrompts)}function*getTemplateSelect(e,t){return yield(0,_utils.question)({name:"template",type:"list",message:`未输入初始模板名，默认从${_chalk2.default.yellow("kylin-templates")}拉取: `,choices:t.map(e=>({name:e.graceful,value:e.path,short:e.path}))})}function*init(e){e.templatePath=e.t=e.t||"kylin_templates";const t=e.args,l=e.cwd;let r=t[0];if(!r){_utils.hint.warn("[Init]",_chalk2.default.yellow("# kylin init <template-name>")),r=(yield getTemplateSelect(e,yield(0,_ls.lsGroup)("kylin-templates",3))).template}const i=(yield getInitAppInfo(e)).appId;let a=e.cwd;const n=t[1];if(n)a=_path2.default.resolve(e.cwd,n);else{if(!(yield getDest(e)).currentDest){const e=`${_chalk2.default.red("不在当前目录创建请通过cli确定初始化路径")}${_chalk2.default.yellow("\n  # kylin init --help\n  # kylin init <templateName> <destDir>")}`;throw _utils.hint.error("CLI",e),new Error(e)}a=e.cwd}const o=getFullGitReps({template:r,program:e}),s=getTempPath(_extends({},o,{program:e})),p=getRepo(_extends({},o,{tmp:s,program:e}));(0,_utils.hint)("[Info] Template:",r),(0,_utils.hint)("[Info] Repo:",p),(0,_utils.hint)("[Info] Tmp:",s);try{if(e.t)yield(0,_utils.gitlabCloneForLocal)({repo:p,tmp:s,program:e,template:r}),_utils.hint.success("[Copy]");else{const t=yield gitlabClone({repo:p,tmp:s,program:e,template:r});_utils.hint.success("[Clone]"),console.log(t)}}catch(e){return _utils.hint.error("[Fail] git clone to tmp directory"),void console.error(e)}try{if((0,_utils.copyAndReplace)(s,a,{appId:i}),!i){const e=`${l}${_path2.default.sep}hpmfile.json`;_fs2.default.existsSync(e)&&_fs2.default.unlinkSync(e)}_utils.hint.success("[Done]")}catch(e){_utils.hint.error("[Fail] copy template files to dest"),console.error(e)}}function getFullGitReps(e){let t=e.template;return t.indexOf("/")>-1?{host:"gitlab.alipay-inc.com",template:t}:{host:"gitlab.alipay-inc.com",template:`kylin-templates/${t}`}}function getTempPath(e){e.program;let t=e.template;const l=_path2.default.join(_userHome2.default,".kylin-templates",t.replace(/\//g,"-"));return _rimraf2.default.sync(l),l}function getRepo(e){e.program;return`git@${e.host}:${e.template}.git`}function*gitlabClone(e){let t=e.repo,l=e.tmp;e.program;const r=yield(0,_utils.exec)(`git clone --progress ${t} ${l}`,{slient:!0});if(!_fs2.default.existsSync(l))throw new Error(`destination "${l}" not found`);return r.stderr}module.exports=exports.default;